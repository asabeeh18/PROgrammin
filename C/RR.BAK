//RR

/*
imitate Q
arvv insrt 
*/
#include<stdio.h>
#include<malloc.h>
int size=0;
int *q;
int n;
void insert(int ab)
{
	if(size==n)
	{
		printf("FULL");
		return;
	}
	q[size]=ab;
	size++;
}
int del()
{
	if(size==0)
		return -1;
	int i,t=q[0];
	for(i=0;i<size;i++)
		q[i]=q[i+1];
	size--;
	return t;
}
void disp(int **a,int n)
{
	int i;
	for(i=0;i<n;i++)
	{
		printf("%d %d %d\n",a[i][0],a[i][1],a[i][2]);
	}
}
void sortArrv(int **a,int n)
{
	int t,i,j;
	for(i=0;i<n-1;i++)
		for(j=0;j<n-i-1;j++)
			if(a[j][1]>a[j+1][1])
			{
				t=a[j][1];
				a[j][1]=a[j+1][1];
				a[j+1][1]=t;
			}
}

void roundRobin(int **a,int n)
{
	int i=0,time=a[i][1],x,j;
	printf("DD");
	while(1)
	{
		while(i<n && a[i][1]<=time && a[i][2]>0)
		{
			insert(i);
			i++;
		}
		x=del();
		time++;
		printf("%d-",a[x][0]);
		if(x==-1)
		{
			int j=0;
			while(j<n && a[i][2]==0)
				j++;
			if(j==n)
				return;
			else
				i++;
		}
		else
		{
			a[x][2]--;
			if(a[x][2]>0)
				insert(i);
		}
	}
}

void main()
{
	int **a,i,j,av,b;
	printf("Enter number of Processes	: ");
	scanf("%d",&n);
	q=(int *)malloc(n*sizeof(int));
	*a=(int *)malloc(n*sizeof(int));
	for(i=0;i<n;i++)
		a[i]=(int *)malloc(3*sizeof(int));
	printf("Arrival time and Burst times%d\n",n);
	for(i=0;i<n;i++)
	{
		scanf("%d %d",&av,&b);
		a[i][0]=i;
		a[i][1]=av;
		a[i][2]=b;
	}
	//disp(a,n);
	printf("105");
	sortArrv(a,n);
	printf("105");
	roundRobin(a,n);
}
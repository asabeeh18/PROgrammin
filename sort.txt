/*

* Team Id: 		10000
* Author List: 		Amiraj Dhawan, e-Yantra Team
* Filename: 		fibonacci.c
* Theme: 		Cargo Sorting â€“ eYRC Specific
* Functions: 		print_fibonacci_series(int) , main()
* Global Variables:	NONE
*
*/

#include<stdio.h>

/*
* Function Name:	print_fibonacci_series
* Input:		num_elements -> integer which stores the number of elements of the fibonacci
*			series to be printed
* Output:		prints the first num_elements of the fibonacci series
* Logic:		The next element of the Fibonacci series is given by
*			next = current_element + prev_element. The code loops for num_elements and
*			prints out the next element
* Example Call:		print_fibonacci_series(10);
*
*/
#include <math.h> //included to support power function


void open(unsigned char);
void sortMan();
void sortFree();
void goBack();
//SOrt
unsigned char swap[2] = { 0 };
unsigned char visited[5] = { 0, 0, 0, 0, 0 };
unsigned char term[5][2] = { { 0, 0 }, { 2, 2 }, { 3, 4 }, { 4, 3 }, { 1, 1 } };
unsigned char indi[5] = { 0, 1, 3, 2, 4 };  //index is color ,value is terminal
unsigned char schD[2];	//values: 0 1 or 2, access by CT%2
unsigned char schP[2];
unsigned int threshold = 1000;
unsigned char RED = 1, GREEN = 2, BLUE = 3, BLACK = 4, EMPTY = 0;
unsigned char CT = 1;
unsigned char arm[2] = { 0, 0 };
unsigned char adjCount = 0, farCount = 0;
unsigned char i;
//

void turnDelay()
{
	static int tDel = 0;
	tDel++;
}

void nodeFront()
{
	static int forwardJaa = 0;
	forwardJaa++;
}
void uTurn()
{
	static int uT = 0;
	uT++;
}

char adjC()
{

	if (CT == 1)
		return 3;
	if (CT == 2)
		return 4;
	if (CT == 3)
		return 1;
	if (CT == 4)
		return 2;
	else return 0;
}

//servo_1 states
//init servo at 90 deg

unsigned char pickup(unsigned char side, unsigned char mode)	//1=swap 0=term
{
	if (mode == 0)
	{
		if (arm[side] == 0)
		{
			if (indi[term[CT][side]] != CT && term[CT][side] != 0)
			{
				arm[side] = term[CT][side];
				term[CT][side] = 0;
				//pickupSeQ(side);
				return 1;
			}
		}
		else if (arm[!side] == 0)
		{
			if (indi[term[CT][!side]] != CT && term[CT][!side] != 0)
			{
				arm[!side] = term[CT][side];
				term[CT][side] = 0;
				uTurn();
				//pickupSeQ(!side);
				uTurn();
				return 1;
			}
		}
	}
	if (mode == 1)
	{
		if (arm[side] == 0)
		{
			arm[side] = swap[CT % 2];
			swap[CT % 2] = 0;
			//pickupSeQ(side);
			return 1;
		}
		else if (arm[!side] == 0)
		{
			arm[!side] = swap[CT % 2];
			swap[CT % 2] = 0;
			//pickupSeQ(!side);
			return 1;
		}
	}
	return 0;
}
unsigned char drop(unsigned char side, unsigned char mode)
{
	if (mode == 0)
	{
		if (arm[side] != 0)
		{
			if (term[CT][side] == 0 && arm[side] == indi[CT])
			{
				term[CT][side] = arm[side];
				arm[side] = 0;
				//dropSeQ(side);
				return 1;
			}
		}
		else if (arm[!side] != 0)
		{
			if (term[CT][!side] == 0 && arm[!side] == indi[CT])
			{
				term[CT][side] = arm[side];
				arm[!side] = 0;
				uTurn();
				//dropSeQ(!side);
				uTurn();
				return 1;
			}
		}
	}
	if (mode == 1)
	{
		if (swap[CT % 2] != 0)
			return 0;
		if (arm[side] != 0)
		{
			swap[CT % 2] = arm[side];
			arm[side] = 0;
			//pickupSeQ(side);
			return 1;
		}
		else if (arm[!side] != 0)
		{
			swap[CT % 2] = arm[!side];
			arm[!side] = 0;
			//pickupSeQ(!side);
			return 1;
		}
	}
	return 0;
}


void swapMan(unsigned char sw, unsigned char nxTerm)		//make efficient
{
	unsigned char pSwap = ((CT == 2 || CT == 3) ? 1 : 0);
	if (nxTerm == indi[swap[sw]])
	{
		if ((arm[1] == 0 && arm[0] == 0) || ((arm[1] == 0 || arm[0] == 0) && (term[nxTerm][0] == 0 || term[nxTerm][1] == 1)))
			i = pickup(pSwap, (unsigned char)1);
	}
	if (nxTerm % 2 != CT % 2)
	{
		if (nxTerm % 2 == sw)
		{
			if (arm[0]>0 && arm[1]>0)
			{
				drop((arm[0] == indi[nxTerm]), 1);
			}
		}
	}
}
void travel(unsigned char nxTerm)
{

	//forwardJaa();
	//swapEncounterdAction
	swapMan(CT % 2, nxTerm);
	/*
	lcd_print(1,11,(CT==1 && (nxTerm == 3 || nxTerm== 4)),1);// ||
	lcd_print(1,12,(CT==4 && (nxTerm == 1 || nxTerm== 2)),1);
	lcd_print(1,13,(CT==2 && (nxTerm == 3 || nxTerm== 4)),1); // ||
	lcd_print(1,14,(CT==3 && (nxTerm == 1 || nxTerm== 2)),1);
	*/
	if ((CT == 1 && (nxTerm == 3 || nxTerm == 4)) || (CT == 4 && (nxTerm == 1 || nxTerm == 2)))
	{
		//nodeLeft();
		//forwardJaa();
		//_delay_ms(1000);
		//forwardJaa();
		CT = nxTerm;	//changed for drop,pickup
		swapMan(nxTerm % 2, nxTerm);
		if (nxTerm == 1 || nxTerm == 4)
			; // nodeRight();
		else
			;// nodeLeft();
	}
	else if ((CT == 2 && (nxTerm == 3 || nxTerm == 4)) || (CT == 3 && (nxTerm == 1 || nxTerm == 2)))
	{
		//nodeRight();
		//forwardJaa();
		//_delay_ms(500);
		//forwardJaa();
		CT = nxTerm;	//changed for drop,pickup
		swapMan(nxTerm % 2, nxTerm);
		if (nxTerm == 2 || nxTerm == 3)
			;// nodeLeft();
		else
			;// nodeRight();
	}
	else
	{
		//_delay_ms(1000);
	}
	CT = nxTerm;
	//forwardJaa();
	///stop();
	//stop();
	//uzzer();
}


void counter()
{
	char adj = adjC(); //v r inside d term wid one box of its color and an empty arm and MAYBE 1 box at sort
	adjCount = 0;
	farCount = 0;

	if (indi[term[CT][0]] == adj)
		adjCount++;

	else if (term[CT][0] != 0 && indi[term[CT][0]] != CT && indi[term[CT][0]] != adj)
		farCount++;

	if (indi[term[CT][1]] == adj)
		adjCount++;

	else if (term[CT][1] != 0 && indi[term[CT][1]] != CT && indi[term[CT][1]] != adj)
		farCount++;


}
unsigned char unvisited()
{
	for (i = 1; i <= 4; i++)
		if (visited[i] == 0)
			return i;
	return 0;
}


void gotoSort()
{
	static int gS = 0;
	gS++;
}

void goBack()
{
	static int gB = 0;
	gB++;
}


unsigned char checkForCompletion()
{
	for (i = 1; i<5; i++)
		if (term[i][0] == indi[i] && term[i][1] == indi[i]);
		else
			return 0;
	return 1;
}
//SORTMAN
//MAIN SORTING FUNCTION
//R-0 L-1
void sortMan()
{
	unsigned char nxTerm = 0;
	unsigned char adj = adjC();
	if (visited[CT] == 0)
		;// termPick();
	counter();
	unsigned char pSwap = ((CT == 2 || CT == 3) ? 1 : 0);
	unsigned char pFar = (term[CT][0] == indi[adj]);		//wont work for empty node
	if (swap[CT % 2] == indi[CT])
	{
		if (farCount == 2)
		{
			if (term[CT][0] == term[CT][1])
				nxTerm = indi[term[CT][0]]; //the common terminal
			else	//both diff of far
			{
				nxTerm = indi[term[CT][0]];
				pickup(0, 0);
				drop(0, 0);
				gotoSort();
				pickup(pSwap, 1);
				drop(pSwap, 1);
				goBack();
				pickup(1, 0);
				drop(1, 0);
				//SchPickupAtSort	//CT
				//SchDropAtSort		//far
			}
		}
		else if (farCount == 1)
		{
			if (adjCount == 1)
			{
				nxTerm = adj;
				pickup(pFar, 0);
				drop(pFar, 0);
				gotoSort();
				pickup(pSwap, 1);
				drop(pSwap, 1);
				goBack();
				pickup(!pFar, 0);
				drop(!pFar, 0);
				//nothing to schedule
			}
			else
			{	//empty node
				//:O :O
				if (visited[adj] == 0 || term[adj][0] != indi[adj] || term[adj][1] != indi[adj])
					nxTerm = adj;

				else	//seq also usable for both empty
				{
					nxTerm = indi[term[CT][pFar]];
					pickup(pFar, 0);
					drop(pFar, 0);
					gotoSort();
					pickup(pSwap, 1);
					goBack();
					drop(!pFar, 0);
				}
			}
		}
		else if (adjCount == 1)
		{
			if (farCount == 1)
			{
				nxTerm = adj;
				pickup(pFar, 0);
				drop(pFar, 0);
				gotoSort();
				pickup(pSwap, 1);
				drop(pSwap, 1);
				goBack();
				pickup(!pFar, 0);
				drop(!pFar, 0);
				//nothing to schedule
			}
			else
			{
				//empty node
				drop(pFar, 0);
				gotoSort();
				pickup(pSwap, 1);
				goBack();
				pickup(!pFar, 0);
				drop(!pFar, 0);
				nxTerm = adj;
			}
		}
		else if (adjCount == 2)
		{
			nxTerm = adj;
			pickup(0, 0);
			drop(0, 0);
			gotoSort();
			pickup(pSwap, 1);
			drop(pSwap, 1);
			goBack();
			pickup(1, 0);
			drop(1, 0);
		}
		if (arm[0] == 0 && arm[1] == 0)
		{
			travel(nxTerm);
			sortFree();
		}
		else
		{
			travel(nxTerm);
			sortMan();
		}

	}


	else if (swap[CT % 2] != indi[CT])	//Sort can be empty
	{
		if (farCount == 2)
		{
			if (term[CT][0] == term[CT][1])	//and sort not empty why ?? :/
			{
				nxTerm = indi[term[CT][0]]; //the common terminal
				//SchPickupAtSort
				//SchDropAtSort
				pickup(0, 0);
				drop(0, 0);
				pickup(1, 0);
				drop(1, 0);
			}
			else if (swap[CT % 2] == term[CT][0])
			{
				pickup(0, 0);
				drop(0, 0);
				nxTerm = indi[arm[0]];
			}
			else if (swap[CT % 2] == term[CT][1])
			{
				pickup(1, 0);
				drop(1, 0);
				nxTerm = indi[arm[1]];
			}
		}
		else if (farCount == 1)
		{
			if (adjCount == 1)
			{
				if (swap[CT % 2] == 0)
				{
					pickup(!pFar, 0); //adjwala
					drop(!pFar, 0);
					pickup(pFar, 0);
					nxTerm = adj;
					//SchDropAtSort
				}
				else
				{
					//Sort of far and CT has 1 far a adj
					pickup(!pFar, 0);
					drop(!pFar, 0);
					nxTerm = adj;
				}
			}
			else  //====
			{	//one node is empty
				nxTerm = indi[term[CT][pFar]];
				pickup(pFar, 0);
				drop(pFar, 0);
				//SchDropAtSort
			}
		}

		else if (adjCount == 1)
		{
			if (farCount == 1)
			{
				if (swap[CT % 2] == 0)
				{
					pickup(!pFar, 0); //adjwala
					drop(!pFar, 0);
					pickup(pFar, 0);
					nxTerm = adj;
					//SchDropAtSort
				}
				else
				{
					//Sort of far and CT has 1 far a adj
					pickup(!pFar, 0);
					drop(!pFar, 0);
					nxTerm = adj;
				}
			}
			else	//1 empty 1 adj
			{
				pickup(!pFar, 0);
				drop(!pFar, 0);
				nxTerm = adj;
			}
		}
		else if (adjCount == 2)
		{
			if (swap[CT % 2]>0) //smthin is at Sort
			{
				pickup(0, 0);
				drop(0, 0);
			}
			else
			{
				pickup(0, 0);
				drop(0, 0);
				pickup(1, 0);
			}
			nxTerm = adj;
		}
		else		//empty
		{
			drop(0, 0);
			drop(1, 0);
			nxTerm = unvisited();
			if (nxTerm == 0)
			{
				if (checkForCompletion())
				{
					//Exit Sequence
				}
			}
		}
	}
}
void sortFree()
{
	unsigned char adj = adjC();
	unsigned char pFar = (term[CT][0] == indi[adj]);		//wont work for empty node
	unsigned char nxTerm = 0;
	if (visited[CT] == 0)
		visited[CT]=1;//termPick();
	counter();
	pickup(0, 0);
	pickup(1, 0);
	if (farCount == 2)
	{
		nxTerm = indi[arm[0]];
		//SchDropAtSort(nxTerm);
	}
	else if (adjCount == 1)
	{
		if (farCount == 1)
		{
			nxTerm = adj;
			//SchDropAtSort(nxTerm);
		}
		else	//1 empty block
		{
			nxTerm = adj;
		}
	}
	else if (farCount == 1)
	{
		if (adjCount == 1)
		{
			nxTerm = adj;
			//SchDropAtSort(nxTerm);
		}
		else	//1 empty block
		{
			if (visited[adj] == 0)
			{
				nxTerm = adj;
				//SchDropAtSort(nxTerm);
			}
			else
				nxTerm = indi[arm[pFar]];

		}
	}
	else if (adjCount == 2)
	{
		nxTerm = adj;
		//SchDropAtSort(nxTerm);
	}
	else	//empty term
	{
		if (visited[adj] == 0)
			nxTerm = adj;
		else
			nxTerm = unvisited();
	}
	if (arm[0] == 0 && arm[1] == 0)
	{
		travel(nxTerm);
		sortFree();
	}
	else
	{
		travel(nxTerm);
		sortMan();
	}
}

void init_sort()
{
	sortFree();
}

//Main Function
int main()
{
	/*init_devices();
	lcd_set_4bit();
	lcd_init();
	color_sensor_scaling();
	buzzer_on();
	servo_1(0);
	servo_2(0);
	servo_3(0);
	forward();
	red_read(); //display the pulse count when red filter is selected
	_delay_ms(500);
	green_read(); //display the pulse count when green filter is selected
	_delay_ms(500);
	blue_read(); //display the pulse count when blue filter is selected
	_delay_ms(500);
	lcd_wr_command(0x01);
	print_sensor(1,1,3);	//Prints value of White Line Sensor1
	print_sensor(1,5,2);	//Prints Value of White Line Sensor2
	print_sensor(1,9,1);	//Prints Value of White Line Sensor3
	print_sensor(2,1,11);
	servo_1(100);
	servo_2(100);
	servo_3(100);
	_delay_ms(7000);
	lcd_wr_command(0x01);
	buzzer();
	*/
	init_sort();
	//travel(1,3);
	while (1)
	{
	}
	return 1;
}